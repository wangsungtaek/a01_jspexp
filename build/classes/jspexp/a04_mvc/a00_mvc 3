# MVC 패턴 핵심 로직
1. 모델1(jsp)에서 처리하는 핵심 데이터, 화면 처리 등을 분리시켜,
	보다 기능별로 처리할 수 있게 한다.
2. 주요 기능 처리 내용
	1) controller : 중재자역할을 한다. 요청값을 처리하고, 모델데이터에
		맞게 이 요청값을 변경하고, 화면에 전달할 핵심데이터를 모델데이터로 만든다.
		최종적으로 화면에(view, jsp)를 호출하여 효과적으로 웹프로그래밍을 할 수
		있게 한다.
	2) 	model : 컨트롤러에서 보내온 요청값을 가지고, 화면에 전달할 핵심데이터를 만든다.
		일반적으로 database를 연동한 dao에서 온 데이터나, 조건/반복등을
		통해서 이 모델데이터를 만든다. jsp에서는 request.setAttribute("모델명",핵심데이터)
		형식으로 처리한다. framework에서는 이러한 처리를 해주는 기능 객체를
		사용하는 이것을 service단이라고 한다.
	3) view : 모델 데이터를 controller를 통해서 전달받아, 화면을 구성하는 것을
		말한다. 보통 Jsp로 웹 화면을 구성하지만, 파일을 다운로드하거나 엑셀을 다운로드
		하는 등 여러가지 화면구성을 할 수 있다. 넘겨온 model를 el/jstl을 통해서
		사용자의 ui(user interface)에 맞게 처리를 해준다.
	
# MVC 패턴 코딩 순서
1. 초기화면 호출을 위한 controller 구성
	요청 page url형식을 정하여, 호출할 초기 화면 page를 선언한다.
	1) http://localhost:7080/jspexp/start.do
	urlPatterns = {"/start.do"}
	2) 만일 초기화면에서도 데이터나 로직을 처리하여, model데이터가 출력이 필요하면
		model단을 선언하여 dao/로직을 호출하여 model데이터를 처리한다.
		request.setAttribute("모델명", 처리할 데이터 객체);
	3) RequestDispatcher rd = request.getRequestDispatcher("jsp폴드 및 파일명")
		rd.forward(request, response);
	4) jsp폴드 및 파일명 : view단(jsp)파일 지정.
2. 초기화면(view단 처리)
	1) jsp로 화면구성을 한다.
	2) model데이터가 있으면 el/jstl을 이용하여 화면구성 처리를 한다.
	3) 다음 처리 프로세스를 위해서 form을 선언하고, form하위에 여러가지 요소객체
		<input, <select, <textarea, 를 통해서 name속성으로 데이터를 전송할 준비를 한다.>
	4) submit 버튼이나, button을 통해서 js의 함수를 호출하여, 전송할 데이터에 대한 유효성
		(공백, 숫자처리, 형식)을 체크하여 서버에서 받을 수 있는
		형식 check를 하고 전송할 수 있게 한다.
	5) submit처리를 통해서, form의 method방식 get/post, 호출할 controller를
		action 속성으로 지정하여 처리한다.
		<form method="post" action="${path}/gogo.do">
		
3. 요청값을 받는 controller
	1) 요청값에 대한 처리. String 변수명 = request.getParameter("요청key");
	2) model 데이터를 처리를 위한 작업(service) -
	  (화면단에 보여줄 데이터가 있을 때)
	  요청값을 model데이터를 만들기에 위한 데이터 변형이나, 조건, 반복문을 처리한다.
		cf) service : 요청값에 데이터 처리, model를 만들기 위한 데이터 처리
			프로세스.
			dao : (data access object) : 데이터를 접근하여 처리하는 객체
		# 모델데이터가 필요할 때 (화면에 보여줄 데이터가 있을 경우)
		- list, 상세페이지, 수정 후 수정된 내용을 볼 경우
		# 모델데이터가 필요가 없는 경우 (처리 프로세스만 하고, 화면에 데이터가 필요 없는 경우)
		- 등록, 삭제
		
	3) model 데이터 처리
		위에 service으로 처리된 데이터를 아래 형식으로 모델데이터를 만든다.
		request.setAttribute("모델명", 할당할 데이터객체");
		
	4) 프로세스가 조건에 따라서 사용하게 될 view단을 호출
		ex) 위 처리 프로세스(service)에서 id/pass가 있을 때는 메인페이지로
			이동 처리, 없을 때에는 다시 로그인 페이지 이동처리.
				
# MVC 패턴을 할때, 주요 에러 내용/대응
1. 기본적인 에러 트래킹 방식.
	1) controller, jsp에서 진행 프로세스에 필요한 데이터가 정상적으로
		넘어가는 지를 디버그 모드로 확인하거나,
		System.out.print("변수나 요청값 등을 확인");
	2) tomcat에서 지원하는 console로그에서 jsp api에서 지원하는
		에러내용을 제외하고, 작성한 소스에서 호출하는 라인을 확인.
		특히, orcale ora-@@@@ 에러코드 내용을 google친구에서 확인.
	3) js에서 확인 처리
		f12 console.log("체크할 js코드처리 시점:"+변수);
2. 가능한한 에러 메시지를 확인하여 검색하여 찾을 수 있도록 한다.
3. 주요 내용 점검 사항
	1) 요청값 확인
		String ename = request.getParameter("ename");
		요청값 내용을 출력이 되지 않았다?
		<input name="이름"
		이름이 요청key와 동일한지 확인.
	2) dao단 에러 : dao 처리는 반드시 sql이 정상 확인하고, 처리할 것..
		1) 요청값으로 넘겨진 메서드 부분에서 데이터가 정상적으로 넘어 갔는지 확인
		2) sql문을 출력을 통해서 정상적인지 확인?
			편집기를 통해서 해당 sql문이 정상적으로 작동하는지 확인
		3) stmt//pstmt 구분하여 처리하셨는지 확인.
		4) pstmt에서 sql의 ? 갯수와 pstmt.setXXX(1,@@@)
			해당 메서드를 통해서 mapping되는 데이터의 갯수가 동일한지 확인
		5) rs.getInt(1)에 해당 select 컬럼에 합당한 데이터 인지?
		catch(SQLException e) {
			System.out.println(e.getMessage())를 통해서 힌트를 주니, 생략하지 말것.
		6) System.out.println("데이터 크기:"+dlist.size());
			데이터 건수 확인
	3) request.setAttribute("empList", list);
		모델명과 jsp에서 사용하는 ${empList}이름이 동일한지 확인
		테스트용을 ${모델명.property명} ${리스트형.size()}크기를 확인
		할 것.
4. 기타 내용
	평소에 기본 코드는 정확하게 암기할려고 노력.		
	